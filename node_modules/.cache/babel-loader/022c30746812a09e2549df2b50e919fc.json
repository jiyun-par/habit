{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiyun\\\\Desktop\\\\GitHub\\\\reactPractice\\\\habit-tracker-function\\\\src\\\\app.jsx\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  let getHabitlist;\n  localStorage.getItem(\"habitlist\") ? getHabitlist = JSON.parse(localStorage.getItem(\"habitlist\")) : getHabitlist = [];\n  let state = {\n    habits: getHabitlist\n  };\n\n  const handleIncrement = habit => {\n    const habits = state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit,\n          count: habit.count + 1\n        };\n      }\n\n      return item;\n    });\n    const list = JSON.stringify(habits);\n    localStorage.setItem(\"habitlist\", list);\n    this.setState({\n      habits\n    });\n  };\n\n  const handleDecrement = habit => {\n    const habits = state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit,\n          count: habit.count > 0 ? habit.count - 1 : 0\n        };\n      }\n\n      return item;\n    });\n    const list = JSON.stringify(habits);\n    localStorage.setItem(\"habitlist\", list);\n    this.setState({\n      habits\n    });\n  };\n\n  const handleDelete = habit => {\n    //id가 같지 않은 요소들로만 다시 배열을 만들어준다\n    const habits = state.habits.filter(item => item.id !== habit.id);\n    const list = JSON.stringify(habits);\n    localStorage.setItem(\"habitlist\", list);\n    this.setState({\n      habits\n    });\n  };\n\n  const onAdd = name => {\n    const habits = [...state.habits, {\n      id: Date.now(),\n      name,\n      count: 0\n    }];\n    const list = JSON.stringify(habits);\n    localStorage.setItem(\"habitlist\", list);\n    this.setState({\n      habits\n    });\n  };\n\n  const handleReset = () => {\n    const habits = state.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit,\n          count: 0\n        };\n      }\n\n      return habit;\n    });\n    const list = JSON.stringify(habits);\n    localStorage.setItem(\"habitlist\", list);\n    this.setState({\n      habits\n    });\n  };\n\n  const habit = state.habits;\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      totalCount: state.habits.filter(item => item.count > 0).length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Habits, {\n      habit: habit,\n      onIncrement: handleIncrement,\n      onDecrement: handleDecrement,\n      onDelete: handleDelete,\n      onAdd: onAdd,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jiyun/Desktop/GitHub/reactPractice/habit-tracker-function/src/app.jsx"],"names":["Habits","Navbar","React","App","props","getHabitlist","localStorage","getItem","JSON","parse","state","habits","handleIncrement","habit","map","item","id","count","list","stringify","setItem","setState","handleDecrement","handleDelete","filter","onAdd","name","Date","now","handleReset","length"],"mappings":"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","sourcesContent":["import \"./app.css\";\r\nimport Habits from \"./components/habits\";\r\nimport Navbar from \"./components/navbar\";\r\nimport React from \"react\";\r\n\r\nconst App = (props) => {\r\n\tlet getHabitlist;\r\n\tlocalStorage.getItem(\"habitlist\")\r\n\t\t? (getHabitlist = JSON.parse(localStorage.getItem(\"habitlist\")))\r\n\t\t: (getHabitlist = []);\r\n\r\n\tlet state = {\r\n\t\thabits: getHabitlist,\r\n\t};\r\n\r\n\tconst handleIncrement = (habit) => {\r\n\t\tconst habits = state.habits.map((item) => {\r\n\t\t\tif (item.id === habit.id) {\r\n\t\t\t\treturn { ...habit, count: habit.count + 1 };\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\tconst list = JSON.stringify(habits);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tthis.setState({ habits });\r\n\t};\r\n\tconst handleDecrement = (habit) => {\r\n\t\tconst habits = state.habits.map((item) => {\r\n\t\t\tif (item.id === habit.id) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...habit,\r\n\t\t\t\t\tcount: habit.count > 0 ? habit.count - 1 : 0,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\tconst list = JSON.stringify(habits);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\r\n\t\tthis.setState({ habits });\r\n\t};\r\n\tconst handleDelete = (habit) => {\r\n\t\t//id가 같지 않은 요소들로만 다시 배열을 만들어준다\r\n\t\tconst habits = state.habits.filter((item) => item.id !== habit.id);\r\n\t\tconst list = JSON.stringify(habits);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\r\n\t\tthis.setState({ habits });\r\n\t};\r\n\r\n\tconst onAdd = (name) => {\r\n\t\tconst habits = [...state.habits, { id: Date.now(), name, count: 0 }];\r\n\t\tconst list = JSON.stringify(habits);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tthis.setState({ habits });\r\n\t};\r\n\tconst handleReset = () => {\r\n\t\tconst habits = state.habits.map((habit) => {\r\n\t\t\tif (habit.count !== 0) {\r\n\t\t\t\treturn { ...habit, count: 0 };\r\n\t\t\t}\r\n\t\t\treturn habit;\r\n\t\t});\r\n\t\tconst list = JSON.stringify(habits);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\r\n\t\tthis.setState({ habits });\r\n\t};\r\n\r\n\tconst habit = state.habits;\r\n\treturn (\r\n\t\t<React.StrictMode>\r\n\t\t\t<Navbar totalCount={state.habits.filter((item) => item.count > 0).length} />\r\n\t\t\t<Habits\r\n\t\t\t\thabit={habit}\r\n\t\t\t\tonIncrement={handleIncrement}\r\n\t\t\t\tonDecrement={handleDecrement}\r\n\t\t\t\tonDelete={handleDelete}\r\n\t\t\t\tonAdd={onAdd}\r\n\t\t\t\tonReset={handleReset}\r\n\t\t\t/>\r\n\t\t</React.StrictMode>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
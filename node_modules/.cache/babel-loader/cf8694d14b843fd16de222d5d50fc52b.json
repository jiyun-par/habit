{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jiyun\\\\Desktop\\\\GitHub\\\\reactPractice\\\\habit-tracker-function\\\\src\\\\app.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\nimport React, { useCallback, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  let getHabitlist;\n  localStorage.getItem(\"habitlist\") ? getHabitlist = JSON.parse(localStorage.getItem(\"habitlist\")) : getHabitlist = [];\n  const [habits, setHabits] = useState(getHabitlist);\n  const handleIncrement = useCallback(habit => {\n    setHabits(habits => habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit,\n          count: habit.count + 1\n        };\n      }\n\n      return item;\n    })); // const list = JSON.stringify(habitList);\n    // localStorage.setItem(\"habitlist\", list);\n  }, []);\n\n  const handleDecrement = habit => {\n    const habitList = habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit,\n          count: habit.count > 0 ? habit.count - 1 : 0\n        };\n      }\n\n      return item;\n    });\n    const list = JSON.stringify(habitList);\n    localStorage.setItem(\"habitlist\", list);\n    setHabits(habitList);\n  };\n\n  const handleDelete = habit => {\n    //id가 같지 않은 요소들로만 다시 배열을 만들어준다\n    const habitList = habits.filter(item => item.id !== habit.id);\n    const list = JSON.stringify(habitList);\n    localStorage.setItem(\"habitlist\", list);\n    setHabits(habitList);\n  };\n\n  const onAdd = name => {\n    const habitList = [...habits, {\n      id: Date.now(),\n      name,\n      count: 0\n    }];\n    const list = JSON.stringify(habitList);\n    localStorage.setItem(\"habitlist\", list);\n    setHabits(habitList);\n  };\n\n  const handleReset = () => {\n    const habitList = habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit,\n          count: 0\n        };\n      }\n\n      return habit;\n    });\n    const list = JSON.stringify(habitList);\n    localStorage.setItem(\"habitlist\", list);\n    setHabits(habitList);\n  };\n\n  const habit = habits;\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      totalCount: habit.filter(item => item.count > 0).length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Habits, {\n      habit: habit,\n      onIncrement: handleIncrement,\n      onDecrement: handleDecrement,\n      onDelete: handleDelete,\n      onAdd: onAdd,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Tgg1dgZCd3pWBIuRTawuX201GrA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jiyun/Desktop/GitHub/reactPractice/habit-tracker-function/src/app.jsx"],"names":["Habits","Navbar","React","useCallback","useState","App","props","getHabitlist","localStorage","getItem","JSON","parse","habits","setHabits","handleIncrement","habit","map","item","id","count","handleDecrement","habitList","list","stringify","setItem","handleDelete","filter","onAdd","name","Date","now","handleReset","length"],"mappings":"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","sourcesContent":["import \"./app.css\";\r\nimport Habits from \"./components/habits\";\r\nimport Navbar from \"./components/navbar\";\r\nimport React, { useCallback, useState } from \"react\";\r\n\r\nconst App = (props) => {\r\n\tlet getHabitlist;\r\n\tlocalStorage.getItem(\"habitlist\")\r\n\t\t? (getHabitlist = JSON.parse(localStorage.getItem(\"habitlist\")))\r\n\t\t: (getHabitlist = []);\r\n\r\n\tconst [habits, setHabits] = useState(getHabitlist);\r\n\r\n\tconst handleIncrement = useCallback((habit) => {\r\n\t\tsetHabits((habits) =>\r\n\t\t\thabits.map((item) => {\r\n\t\t\t\tif (item.id === habit.id) {\r\n\t\t\t\t\treturn { ...habit, count: habit.count + 1 };\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\t\t);\r\n\t\t// const list = JSON.stringify(habitList);\r\n\t\t// localStorage.setItem(\"habitlist\", list);\r\n\t}, []);\r\n\r\n\tconst handleDecrement = (habit) => {\r\n\t\tconst habitList = habits.map((item) => {\r\n\t\t\tif (item.id === habit.id) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...habit,\r\n\t\t\t\t\tcount: habit.count > 0 ? habit.count - 1 : 0,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t});\r\n\t\tconst list = JSON.stringify(habitList);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tsetHabits(habitList);\r\n\t};\r\n\tconst handleDelete = (habit) => {\r\n\t\t//id가 같지 않은 요소들로만 다시 배열을 만들어준다\r\n\t\tconst habitList = habits.filter((item) => item.id !== habit.id);\r\n\t\tconst list = JSON.stringify(habitList);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tsetHabits(habitList);\r\n\t};\r\n\r\n\tconst onAdd = (name) => {\r\n\t\tconst habitList = [...habits, { id: Date.now(), name, count: 0 }];\r\n\t\tconst list = JSON.stringify(habitList);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tsetHabits(habitList);\r\n\t};\r\n\tconst handleReset = () => {\r\n\t\tconst habitList = habits.map((habit) => {\r\n\t\t\tif (habit.count !== 0) {\r\n\t\t\t\treturn { ...habit, count: 0 };\r\n\t\t\t}\r\n\t\t\treturn habit;\r\n\t\t});\r\n\t\tconst list = JSON.stringify(habitList);\r\n\t\tlocalStorage.setItem(\"habitlist\", list);\r\n\t\tsetHabits(habitList);\r\n\t};\r\n\r\n\tconst habit = habits;\r\n\treturn (\r\n\t\t<React.StrictMode>\r\n\t\t\t<Navbar totalCount={habit.filter((item) => item.count > 0).length} />\r\n\t\t\t<Habits\r\n\t\t\t\thabit={habit}\r\n\t\t\t\tonIncrement={handleIncrement}\r\n\t\t\t\tonDecrement={handleDecrement}\r\n\t\t\t\tonDelete={handleDelete}\r\n\t\t\t\tonAdd={onAdd}\r\n\t\t\t\tonReset={handleReset}\r\n\t\t\t/>\r\n\t\t</React.StrictMode>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}